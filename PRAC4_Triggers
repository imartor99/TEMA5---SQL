/* 1. En la base de datos test escriba un trigger para la tabla alumnos con las siguientes características:
    Trigger: trigger_crear_email_before_insert
Se ejecuta sobre la tabla alumnos.
Se ejecuta antes de una operación de inserción.
Si el nuevo valor del email que se quiere insertar es NULL, entonces se le creará automáticamente una  dirección de email y se insertará en la tabla.
Si el nuevo valor del email no es NULL se guardará en la tabla el valor del email.
Nota: Para crear la nueva dirección de email se deberá hacer uso del procedimiento crear_email. */

USE test;

DELIMITER //
DROP PROCEDURE IF EXISTS crear_email //
CREATE PROCEDURE crear_email(
    IN nombre VARCHAR(50), 
    IN apellido1 VARCHAR(50), 
    IN apellido2 VARCHAR(50), 
    IN dominio VARCHAR(50), 
    OUT email VARCHAR(255)
)
BEGIN

    SET email = CONCAT(
        LEFT(nombre, 1),
        LEFT(apellido1, 3),
        LEFT(apellido2, 3),
        '@',
        dominio
    );
END //
DELIMITER ;

DELIMITER //
DROP TRIGGER IF EXISTS trigger_crear_email_before_insert //
CREATE TRIGGER trigger_crear_email_before_insert
BEFORE INSERT ON alumnos
FOR EACH ROW
BEGIN
	DECLARE nuevo_email VARCHAR(255);

	IF new.email is NULL THEN
    CALL crear_email(NEW.nombre, NEW.apellido1, new.apellido2, 'dominio.com', nuevo_email);
    
    SET NEW.email = nuevo_email;
    END IF;
END //
DELIMITER ;

INSERT INTO alumnos (nombre, apellido1, apellido2, email)
VALUES ('Carlos', 'García', 'López', NULL);

SELECT * FROM alumnos;

/* 2.    Modifica el ejercicio anterior y añade un nuevo trigger que las siguientes características:

Trigger: trigger_guardar_email_after_update:
Se ejecuta sobre la tabla alumnos.
Se ejecuta después de una operación de actualización.
Cada vez que un alumno modifique su dirección de email se deberá insertar un nuevo registro en una tabla llamada log_cambios_email.
La tabla log_cambios_email contiene los siguientes campos:

    id: clave primaria (entero autonumérico)
    id_alumno: id del alumno (entero)
    fecha_hora: marca de tiempo con el instante del cambio (fecha y hora)
    old_email: valor anterior del email (cadena de caracteres)
    new_email: nuevo valor con el que se ha actualizado */

CREATE TABLE log_cambios_email(
	id INT AUTO_INCREMENT PRIMARY KEY,
    id_alumno INT,
    fecha_hora DATETIME DEFAULT CURRENT_TIMESTAMP,
    old_email VARCHAR(150),
    new_email VARCHAR(150)
);
    
DELIMITER // 
DROP TRIGGER IF EXISTS trigger_guardar_email_after_update //
CREATE TRIGGER trigger_guardar_email_after_update
AFTER UPDATE on alumnos 
FOR EACH ROW
BEGIN
	IF OLD.email != NEW.email THEN
        INSERT INTO log_cambios_email (id_alumno, fecha_hora, old_email, new_email)
        VALUES (OLD.id, NOW(), OLD.email, NEW.email);
    END IF;
END //
DELIMITER ;

UPDATE alumnos 
SET email = 'alex99perez@dominio.com' 
WHERE id = 1;

SELECT * FROM log_cambios_email;


/* 3.   Modifica el ejercicio anterior y añade un nuevo trigger que tenga las siguientes características:

Trigger: trigger_guardar_alumnos_eliminados:
Se ejecuta sobre la tabla alumnos.
Se ejecuta después de una operación de borrado.
Cada vez que se elimine un alumno de la tabla alumnos se deberá insertar un nuevo registro en una tabla llamada log_alumnos_eliminados.
La tabla log_alumnos_eliminados contiene los siguientes campos:

    id: clave primaria (entero autonumérico)
    id_alumno: id del alumno (entero)
    fecha_hora: marca de tiempo con el instante del cambio (fecha y hora)
    nombre: nombre del alumno eliminado (cadena de caracteres)
    apellido1: primer apellido del alumno eliminado (cadena de caracteres)
    apellido2: segundo apellido del alumno eliminado (cadena de caracteres)
    email: email del alumno eliminado (cadena de caracteres)     */
    
CREATE TABLE log_alumnos_eliminados(
	id INT AUTO_INCREMENT PRIMARY KEY,
    id_alumno INT,
    fecha_hora DATETIME DEFAULT CURRENT_TIMESTAMP,
    nombre VARCHAR(20),
    apellido1 VARCHAR(30),
    apellido2 VARCHAR(30),
    email VARCHAR(150)
);

DELIMITER //
DROP TRIGGER IF EXISTS trigger_guardar_alumnos_eliminados //
CREATE TRIGGER trigger_guardar_alumnos_eliminados
AFTER DELETE ON alumnos
FOR EACH ROW
	
BEGIN 
	INSERT INTO log_alumnos_eliminados (id_alumno, fecha_hora, nombre, apellido1, apellido2, email)
    VALUES (OLD.id, NOW(), OLD.nombre, OLD.apellido1, OLD.apellido2, OLD.email);
END //
DELIMITER ;

DELETE FROM alumnos WHERE id = 2;

SELECT * FROM log_alumnos_eliminados;
    
    
    
